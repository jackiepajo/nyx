import "std:sdl" as sdl;
import "std:list" as lists;
import "./config.nyx" as config;
import "./utils.nyx" as utils;

auto FONT_PATH = "examples/snake_game/fonts/Roboto.ttf";
auto FONT_SIZE = 24;

func run_snake_game() = {
    if (!sdl.init(sdl.SDL_INIT_VIDEO + sdl.SDL_INIT_EVENTS)) {
        output("Failed to initialize SDL Video or Events");
        return 1;
    }

    if (!sdl.ttf_init()) {
        output("Failed to initialize SDL_ttf. Check C++ debug output for TTF_Error.");
        sdl.quit();
        return 1;
    }

    auto score_display_font = sdl.ttf_openFont(FONT_PATH, FONT_SIZE);
    if (!score_display_font) {
        output("Failed to load font: #{FONT_PATH}. Check C++ debug output for TTF_Error.");
        sdl.ttf_quit();
        sdl.quit();
        return 1;
    }

    auto game_window = sdl.createWindow(
        "Nyx Snake Game",
        sdl.SDL_WINDOWPOS_CENTERED,
        sdl.SDL_WINDOWPOS_CENTERED,
        config.SCREEN_WIDTH, config.SCREEN_HEIGHT, sdl.SDL_WINDOW_SHOWN
    );

    if (!game_window) {
        output("Failed to create window");
        sdl.ttf_quit();
        sdl.quit();
        return 1;
    }

    auto game_renderer = sdl.createRenderer(game_window, -1, sdl.SDL_RENDERER_ACCELERATED_VSYNC);

    if (!game_renderer) {
        output("Failed to create renderer");
        sdl.ttf_quit();
        sdl.quit();
        return 1;
    }

    auto snake_segments_list = [
        [config.BOARD_WIDTH / 2, config.BOARD_HEIGHT / 2],
        [config.BOARD_WIDTH / 2 - 1, config.BOARD_HEIGHT / 2],
        [config.BOARD_WIDTH / 2 - 2, config.BOARD_HEIGHT / 2]
    ];

    auto current_snake_dx = 1;
    auto current_snake_dy = 0;
    auto player_input_dx = 1;
    auto player_input_dy = 0;

    auto current_food_position = [0,0];
    auto game_score = 0;
    auto is_game_over_flag = false;
    auto is_game_running = true;
    auto game_tick_counter = 0;

    func update_game_food_position(snake_body, score_val, tick_val) = {
        auto new_pos = utils.generate_food_position(snake_body, score_val, tick_val, config.BOARD_WIDTH, config.BOARD_HEIGHT);
        current_food_position[0] = new_pos[0];
        current_food_position[1] = new_pos[1];
    }

    update_game_food_position(snake_segments_list, game_score, game_tick_counter);

    for (game_tick_counter = 0; is_game_running and !is_game_over_flag; game_tick_counter++) {
        for (auto sdl_event_data = sdl.pollEvent(); sdl_event_data; sdl_event_data = sdl.pollEvent()) {
            auto sdl_event_type_id = sdl_event_data[0];
            if (sdl_event_type_id == sdl.SDL_QUIT) {
                is_game_running = false;
                break;
            }
            if (sdl_event_type_id == sdl.SDL_KEYDOWN) {
                auto sdl_key_code_value = sdl_event_data[1];
                if (sdl_key_code_value == sdl.K_ESCAPE) {
                    is_game_running = false;
                } else if (sdl_key_code_value == sdl.K_UP and current_snake_dy == 0) {
                    player_input_dx = 0; player_input_dy = -1;
                } else if (sdl_key_code_value == sdl.K_DOWN and current_snake_dy == 0) {
                    player_input_dx = 0; player_input_dy = 1;
                } else if (sdl_key_code_value == sdl.K_LEFT and current_snake_dx == 0) {
                    player_input_dx = -1; player_input_dy = 0;
                } else if (sdl_key_code_value == sdl.K_RIGHT and current_snake_dx == 0) {
                    player_input_dx = 1; player_input_dy = 0;
                }
            }
            if (!is_game_running) { break; }
        }

        current_snake_dx = player_input_dx;
        current_snake_dy = player_input_dy;
        
        auto current_snake_head = snake_segments_list[0];
        auto new_snake_head_pos_x = current_snake_head[0] + current_snake_dx;
        auto new_snake_head_pos_y = current_snake_head[1] + current_snake_dy;

        if (new_snake_head_pos_x < 0 or new_snake_head_pos_x >= config.BOARD_WIDTH or new_snake_head_pos_y < 0 or new_snake_head_pos_y >= config.BOARD_HEIGHT) {
            is_game_over_flag = true;
        }

        if (!is_game_over_flag) {
            for(auto collision_check_idx=0; collision_check_idx < len(snake_segments_list); collision_check_idx++) {
                auto segment_to_check = snake_segments_list[collision_check_idx];
                if (segment_to_check[0] == new_snake_head_pos_x and segment_to_check[1] == new_snake_head_pos_y) {
                    is_game_over_flag = true;
                    break;
                }
            }
        }

        if (is_game_over_flag) {
            continue;
        }

        auto new_head_segment = [new_snake_head_pos_x, new_snake_head_pos_y];
        snake_segments_list = lists.prepend(snake_segments_list, new_head_segment);

        if (new_snake_head_pos_x == current_food_position[0] and new_snake_head_pos_y == current_food_position[1]) {
            game_score++;
            update_game_food_position(snake_segments_list, game_score, game_tick_counter);
        } else {
            if (len(snake_segments_list) > 0) {
                snake_segments_list = lists.slice(snake_segments_list, 0, len(snake_segments_list) - 1);
            }
        }
        
        sdl.setRenderDrawColor(game_renderer, 10, 20, 30, 255);
        sdl.renderClear(game_renderer);

        sdl.setRenderDrawColor(game_renderer, 200, 50, 50, 255);
        auto food_display_rect = [current_food_position[0] * config.CELL_SIZE, current_food_position[1] * config.CELL_SIZE, config.CELL_SIZE, config.CELL_SIZE];
        sdl.renderFillRect(game_renderer, food_display_rect);

        sdl.setRenderDrawColor(game_renderer, 50, 200, 50, 255);
        for(auto draw_loop_idx=0; draw_loop_idx < len(snake_segments_list); draw_loop_idx++) {
            auto segment_coords = snake_segments_list[draw_loop_idx];
            auto segment_display_rect = [segment_coords[0] * config.CELL_SIZE, segment_coords[1] * config.CELL_SIZE, config.CELL_SIZE, config.CELL_SIZE];
            sdl.renderFillRect(game_renderer, segment_display_rect);
        }

        auto score_text_content = "Score: #{game_score}";
        auto score_text_color = [255, 255, 255, 255];

        auto score_text_surface = sdl.ttf_renderTextBlended(score_display_font, score_text_content, score_text_color[0], score_text_color[1], score_text_color[2], score_text_color[3]);
        if (score_text_surface) {
            auto score_text_texture = sdl.createTextureFromSurface(game_renderer, score_text_surface);
            if (score_text_texture) {
                auto score_texture_dims = sdl.queryTexture(score_text_texture);
                auto score_texture_w = score_texture_dims[0];
                auto score_texture_h = score_texture_dims[1];
                auto score_dest_rect = [10, 10, score_texture_w, score_texture_h];

                sdl.renderCopy(game_renderer, score_text_texture, nyx_null, score_dest_rect);
            }
        }
        
        sdl.renderPresent(game_renderer);
        sdl.delay(config.GAME_SPEED_DELAY);
    }

    if (is_game_over_flag) {
        output("GAME OVER");
        output("Final Score: #{game_score}");
    }

    sdl.ttf_quit();
    sdl.quit();
    return 0;
}

run_snake_game();